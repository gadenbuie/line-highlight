---
title: "Code Line Number(s) Highlight in html"
author: "Shafayet Khan Shafee"
date: "01-06-2023"
date-modified: last-modified
format: html
toc: true
filters:
  - line-highlight
---


## Highlighting Source Line Numbers

#### Example 01

Suppose we want to highlight the second line of the following code chunk, to do that, we simply use, `source-line-numbers: "2"`.


```{r}
#| source-line-numbers: "2"

iris |> 
  head(5)
```


#### Example 02 (with source code line number)

Also, having the source code line numbered in such case would be helpful. We can do that by using source class `numberLines` (i.e. `#| class-source: "numberLines"`).

Here we have highlighted line number 2 and 6 to 7 and have also added line numbers at the left side using `numberLines` source-class.

```{r}
#| message: false
#| warning: false
#| class-source: "numberLines"
#| source-line-numbers: "2,6-7"

# library call
library(dplyr)

# code
iris |> 
  group_by(Species) |> 
  summarize(mean(Sepal.Length))
```


## Highlighting on markdown formatted codeblocks

Highlighting will also works on syntactically formatted markdown code blocks (non-executable)(e.g. `{.r}`, `{.python}`, `{.julia}` etc)

Use `source-line-numbers` as code-block attributes (i.e. \<attribute-name\>=\<value\>),

````{.r}
```{.r source-line-numbers="1,4"}
library(dplyr)

iris |> 
  group_by(Species) |> 
  summarize(mean(Sepal.Length))
```
````

Therefore, the above code block is rendered as,

```{.r source-line-numbers="1,4"}
library(dplyr)

iris |> 
  group_by(Species) |> 
  summarize(mean(Sepal.Length))
```

To get line numbers, use the `.numberLines` class additionally on the code-block,

````{.python}
```{.python source-line-numbers="3-4" .numberLines}
print("Hello world")

for name in ["Sam", "Jake"]:
    print(f"Hello {name}!")
```
````

which is then rendered as,

```{.python source-line-numbers="3-4" .numberLines}
print("Hello world")

for name in ["Sam", "Jake"]:
    print(f"Hello {name}!")
```


And you can use line-highlighting for code blocks of many different languages (languages for which pandoc supports syntax highlighting. See the list by running `pandoc --list-highlight-languages` if you have pandoc installed.)

````{.julia}
```{.julia .numberLines source-line-numbers="2-4"}
for i = 1:100
    str = i % 3 == 0 ? "Fizz" : ""
    str *= i % 5 == 0 ? "Buzz" : ""
    if isempty(str)
        str = i
    end
    println(str)
end
```
````

```{.julia .numberLines source-line-numbers="2-4"}
for i = 1:100
    str = i % 3 == 0 ? "Fizz" : ""
    str *= i % 5 == 0 ? "Buzz" : ""
    if isempty(str)
        str = i
    end
    println(str)
end
```

But of course, line highlighting also works on code blocks without language class name, but you will not get the syntax highlighting,

````{.julia}
```{.numberLines source-line-numbers="2-4"}
for i = 1:100
    str = i % 3 == 0 ? "Fizz" : ""
    str *= i % 5 == 0 ? "Buzz" : ""
    if isempty(str)
        str = i
    end
    println(str)
end
```
````

```{.numberLines source-line-numbers="2-4"}
for i = 1:100
    str = i % 3 == 0 ? "Fizz" : ""
    str *= i % 5 == 0 ? "Buzz" : ""
    if isempty(str)
        str = i
    end
    println(str)
end
```



## Highlighting Output Line Numbers

Highlighting output line numbers a bit tricky. To enable output line number highlighting, we need to use both output class `highlight` and `numberLines` along with `output-line-numbers`.


#### Example 01

So to highlight second line of output, we use `output-line-numbers: "2"` and `class-output: "highlight numberLines"` (Sorry couldn't make it any more easier :D :p).


```{r}
#| source-line-numbers: "1,3"
#| class-output: "highlight numberLines"
#| output-line-numbers: "2"

mtcars |> 
  summarize(
    avg_mpg = mean(mpg)
  )
```


#### Example 02


```{r}
#| source-line-numbers: "2"
#| class-source: "numberLines"
#| class-output: "highlight numberLines"
#| output-line-numbers: "1-3"

iris |> 
  group_by(Species) |> 
  summarize(mean(Sepal.Length))
```
